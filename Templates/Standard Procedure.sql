CREATE Procedure prProcedureName
/***********************************************************************
* Purpose:   Short description of what the function will do
* Inputs:    A list of all input parameters
* Returns:   If it returns a value to the calling procedure
* Outputs:   If the procedure sends data to an external device or service
*             (e.g., printer, file, database)
* Errors:    What errors are raised by the routine and what Exception 
*             handler can safely process them.
* Notes:     Additional information about the routine
* Usage:     Intended use of the routine used in a calling procedure
* Testing:   How the routine was tested to discover bugs.
* Revision:  Who, when, and what changes were made.
***********************************************************************/
(
	-- required input parameters go here
	@AnIDInt int,

	-- if New ID is generated from an input statement
	@NewIdInt int OUTPUT,

	--if RowCount is generated by various statements
	@RowCountInt int = 0 OUTPUT,

	-- error return values
	@ErrorCodeInt int = 0 OUTPUT,
	@ErrorMsgVChr varchar(100) = '' OUTPUT,

	-- if debugging is needed
	@Debug bit = 0
)
As

-- Improves performance
Set nocount on
          
-- Initialize Error Message
If @ErrorMsgVChr Is Null
	Set @ErrorMsgVChr = ''

-- Capture any error on procedure load
Set @ErrorCodeInt = @@Error

-- Get this Stored Procedure's name for later use
Declare @ProcedureVChr sysname
Set @ProcedureVChr = Object_Name(@@ProcID)

If @Debug <> 0
Begin
	Select '**** ' + @ProcedureVChr + ' START ****'
	Select '****** Input Parameters ******'
	Select @AnIDInt as AnIDInt
End

-- transactions: only if required
If @ErrorCodeInt = 0
Begin
	Declare @TranCountOnEntryInt int
	Set @TranCountOnEntryInt = @@TranCount
	BEGIN TRANSACTION
End

If @ErrorCodeInt = 0
Begin
	If @Debug <> 0
		-- Header for debugging
		Select '**** Intended Recordset ****'

	-- Implement T-SQL code here ----------------------------------
	--- Consider using the NOLOCK hint in the query if appropriate
	
	
	-- record important info for later use
	Select @ErrorCodeInt = @@Error, @NewIdInt = @@Identity, @RowCountInt = @@RowCount	

	If @ErrorCodeInt <> 0
		-- record informative error message with parameters
		Set @ErrorMsgVChr = @ProcedureVChr + ': SQL command failed. '

	If @Debug <> 0
	-- output dataset or info for debugging
	Begin
		Select '**** Relevant Data Tables ****'
		Select * from atable
	End
End

Else
Begin
	-- Procedure didn't load properly
	Set @ErrorMsgVChr = @ProcedureVChr + ': Stored Procedure did not initialize properly.'
End

-- transactions: only if required
If @@TranCount > @TranCountOnEntryInt
Begin
	-- commit transaction only if no errors
	If @ErrorCodeInt = 0
		COMMIT TRANSACTION
	Else
	Begin
		ROLLBACK TRANSACTION
		
		-- append error message that transaction is canceled
		Set @ErrorMsgVChr = @ErrorMsgVChr + ' - Transaction canceled. '
	End
End

If @Debug <> 0
	Select '**** ' + @ProcedureVChr + ' END ****'

-- return error code as well as in output parameter
Return @ErrorCodeInt
 