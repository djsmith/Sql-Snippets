Create Procedure prGetOrdersByPage
/***********************************************************************
* Purpose:	This procedure returns a single "page" of data from a table
* Inputs:	The page number, page size, and the Order by column(s) for 
*		the result set
* Returns:	The page of records from the Orders table, along with 
*		Other standard output variables.
* Outputs:	
* Errors:	
* Notes:	This routine builds a sql command and then uses the EXEC function
*		to execute the command, which may not be efficient and forces
*		SQL server to recompile the command each time it is run.
*		The order by and top clauses cannot use parameter values, so the
*		sql command must be built as a string and then executed.
*						
* Usage:	To select a small set of records out of a large table
* Testing:	
* Revision:	Daniel Smith, March 2003
***********************************************************************/
(
	-- required input parameters go here
	@ThePage int,
	@PageSize int,
	@OrderBy varchar(100),

	--if RowCount is generated by various statements
	@RowCountInt int = 0 OUTPUT,

	-- error return values
	@ErrorCodeInt int = 0 OUTPUT,
	@ErrorMsgVChr varchar(100) = '' OUTPUT,

	-- if debugging is needed
	@Debug bit = False
)
As

-- Improves performance
Set nocount on
 
-- Initialize Error Message
If @ErrorMsgVChr Is Null
	Set @ErrorMsgVChr = ''

-- Capture any error on procedure load
Set @ErrorCodeInt = @@Error

-- Get this Stored Procedure's name for later use
Declare @ProcedureVChr sysname
Set @ProcedureVChr = Object_Name(@@ProcID)

If @Debug <> 0
Begin
	Select '**** ' + @ProcedureVChr + ' START ****'
	Select '****** Input Parameters ******'
	Select @ThePage as ThePage,
		@PageSize as PageSize,
		@OrderBy as OrderBy
End

If @ErrorCodeInt = 0
Begin
	If @Debug <> 0
		-- Header for debugging
		Select '**** Intended Recordset ****'

	-- This example uses the Northwind database, Orders table---------
	declare @PageStartRow int
	declare @PageEndRow int
	-- This my need to be larger depending on the size of the sql command
	declare @SQLCommand varchar(300)

	if @ThePage < 1 
		set @ThePage = 1
	set @PageStartRow = (@PageSize * (@ThePage - 1))
	set @PageEndRow = @PageStartRow + @PageSize

	set @SQLCommand =	'Select * From Orders where (OrderID Not In 
		(Select Top ' + cast((@PageStartRow) as varchar) + ' OrderID From Orders Order By  ' + @OrderBy + '))
	 And (OrderID In (Select Top ' + cast((@PageEndRow) as varchar) + ' OrderID from Orders Order by  ' + @OrderBy + '))
	 Order by ' + @OrderBy
	
	Exec (@SQLCommand)

	Select @ErrorCodeInt = @@Error, @RowCountInt = @@RowCount	

	If @ErrorCodeInt <> 0
		-- record informative error message with parameters
		Set @ErrorMsgVChr = @ProcedureVChr + ': SQL command failed. '

	If @Debug <> 0
	-- output dataset or info for debugging
	Begin
		Select '**** Computed variables ****'
		Select @PageStartRow as PageStartRow, @PageEndRow as PageEndRow, @SQLCommand as SQLCommand
		Select '**** Relevant Data Tables ****'
		Select * from Orders
	End
End

Else
Begin
	-- Procedure didn't load properly
	Set @ErrorMsgVChr = @ProcedureVChr + ': Stored Procedure did not initialize properly.'
End

If @Debug <> 0
	Select '**** ' + @ProcedureVChr + ' END ****'

-- return error code as well as in output parameter
Return @ErrorCodeInt 